1) create a laravel project
2) created two model Product & Review with their respective factory,migration,seeder, controller using the following
line of code:

php artisan make:model Model/Product -a
php artisan make:model Model/Review -a

3) In Api.php file defined our api route for Product and Review:

Route::apiresource('/products', 'ProductController');
Route::group(['prefix'=>'products'],function(){
    Route::apiresource('/{product}/reviews','ReviewController'); // /products/11/reviews
    
});

4) you can see the routes in the command prompt using:

php artisan route:list

5) migration of product:


public function up()
    {
        Schema::create('products', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('name');
            $table->text('detail');
            $table->integer('price');
            $table->integer('stock');
            $table->integer('discount');
            $table->timestamps();
        });
    }


6) migration of review:

 public function up()
    {
        Schema::create('reviews', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('customer');
            $table->text('review');
            $table->integer('star');
            $table->bigInteger('product_id')->unsigned();
            $table->foreign('product_id')->references('id')->on('products')->onDelete('cascade');
            $table->timestamps();
        });
    }

7) php artisan migrate

#Now we will seed our database using factory and seeder command:

You can get faker related information from this github link: https://github.com/fzaninotto/Faker

8) In Product factory write: 
$factory->define(Product::class, function (Faker $faker) {
    return [
        'name' => $faker->word,
        'detail' => $faker->paragraph,
        'price' => $faker->numberBetween(100,1000),
        'stock' => $faker->randomDigit,
        'discount' => $faker->numberBetween(2,30)
    ];
});

9)In review factory write: 
$factory->define(Review::class, function (Faker $faker) {
    return [
        'product_id' => function(){
            return Product::all()->random();
        },
        'customer' => $faker->name,
        'review' => $faker->paragraph,
        'star'  => $faker->numberBetween(0,5)
    ];
});
10) In seeds-> databaseSeeder write:
public function run()
    {
        // $this->call(UsersTableSeeder::class);
        factory(App\Model\Product::class,50)->create();
        factory(App\Model\Review::class,300)->create();
    }

11) in command prompt write: 
	php artisan db:seed

#Creating Relationship

12) In product model write:
    public function reviews(){

        return $this->hasMany(Review::class);
    
    }

13) In review model write:
    public function product(){
        return $this->belongsTo(Product::class);
    }

14) To test the relationship, in command prompt write (Optional):
	php artisan tinker
	App/Model/Product::find(4) 
	App/Model/Product::find(4)->reviews

#Creating API Resource / Transformer:

15)Write this in the command prompt:
	 php artisan make:resource Product/ProductCollection

16)  Now to check all products; go to product controller and in index write:
	return Product::all();

17) Check this in the localhost's link: 
	http://localhost:8000/api/products

# Creating a new transformer:
18) in command prompt: 
	php artisan make:resource Product/ProductResource

19) In productResouce.php file write:
    public function toArray($request)
    {
        return [
            'name' => $this->name,
            'description' => $this->detail,
            'price' => $this->price,
            'stock' => $this->stock,
            'discount' => $this->discount
        ];
    }

20) In product controller:
use App\Http\Resources\Product\ProductResource;

public function show(Product $product)
    {
        return new ProductResource($product);
    }

21) open http://localhost:8000/api/products/4 and see how it transforms and showed data without
showin created_at updated_at.