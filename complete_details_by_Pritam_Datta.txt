
[ 
#to view data in json format you can you this google extension:
	https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=bn
]

LET'S BEGIN:

1) create a laravel project

2) created two model Product & Review with their respective factory,migration,seeder, controller using the following
line of code:

php artisan make:model Model/Product -a
php artisan make:model Model/Review -a

3) In Api.php file defined our api route for Product and Review:

Route::apiresource('/products', 'ProductController');
Route::group(['prefix'=>'products'],function(){
    Route::apiresource('/{product}/reviews','ReviewController'); // /products/11/reviews
    
});

4) you can see the routes in the command prompt using:

php artisan route:list

5) migration of product:


public function up()
    {
        Schema::create('products', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('name');
            $table->text('detail');
            $table->integer('price');
            $table->integer('stock');
            $table->integer('discount');
            $table->timestamps();
        });
    }


6) migration of review:

 public function up()
    {
        Schema::create('reviews', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('customer');
            $table->text('review');
            $table->integer('star');
            $table->bigInteger('product_id')->unsigned();
            $table->foreign('product_id')->references('id')->on('products')->onDelete('cascade');
            $table->timestamps();
        });
    }

7) php artisan migrate

#Now we will seed our database using factory and seeder command:

You can get faker related information from this github link: https://github.com/fzaninotto/Faker

8) In Product factory write: 
$factory->define(Product::class, function (Faker $faker) {
    return [
        'name' => $faker->word,
        'detail' => $faker->paragraph,
        'price' => $faker->numberBetween(100,1000),
        'stock' => $faker->randomDigit,
        'discount' => $faker->numberBetween(2,30)
    ];
});

9)In review factory write: 
$factory->define(Review::class, function (Faker $faker) {
    return [
        'product_id' => function(){
            return Product::all()->random();
        },
        'customer' => $faker->name,
        'review' => $faker->paragraph,
        'star'  => $faker->numberBetween(0,5)
    ];
});
10) In seeds-> databaseSeeder write:
public function run()
    {
        // $this->call(UsersTableSeeder::class);
        factory(App\Model\Product::class,50)->create();
        factory(App\Model\Review::class,300)->create();
    }

11) in command prompt write: 
	php artisan db:seed

#Creating Relationship

12) In product model write:
    public function reviews(){

        return $this->hasMany(Review::class);
    
    }

13) In review model write:
    public function product(){
        return $this->belongsTo(Product::class);
    }

14) To test the relationship, in command prompt write (Optional):
	php artisan tinker
	App/Model/Product::find(4) 
	App/Model/Product::find(4)->reviews




#Creating API Resource / Transformer:

15)Write this in the command prompt:
	 php artisan make:resource Product/ProductCollection

16)  Now to check all products; go to product controller and in index write:
	return Product::all();

17) Check this in the localhost's link: 
	http://localhost:8000/api/products

# Creating a new transformer:
18) in command prompt: 
	php artisan make:resource Product/ProductResource

19) In productResouce.php file write:
    public function toArray($request)
    {
        return [
            'name' => $this->name,
            'description' => $this->detail,
            'price' => $this->price,
            'stock' => $this->stock,
            'discount' => $this->discount
        ];
    }

20) In product controller:
use App\Http\Resources\Product\ProductResource;

public function show(Product $product)
    {
        return new ProductResource($product);
    }

21) open http://localhost:8000/api/products/4 and see how it transforms and showed data without
showin created_at updated_at.

#Transforming Products

22) To access particular product reviews as a link in json file:
 In ProductResource.php write:
return [
            'name' => $this->name,
            'description' => $this->detail,
            'price' => $this->price,
            'stock' => $this->stock,
            'discount' => $this->discount,
            'href' => [
                'reviews' => route('reviews.index', $this->id)
            ]
        ];

(write href part only)

23) To see the rating by making a logic here we are summing up all the star and showing
rating so write:
         return [
            'name' => $this->name,
            'description' => $this->detail,
            'price' => $this->price,
            'stock' => $this->stock == 0 ? 'Out of stock' : $this->stock,
            'discount' => $this->discount,
            'rating' => $this->reviews->count() > 0 ? round($this->reviews->sum('star')/$this->reviews->count(),2) : 'No rating yet',
            'href' => [
                'reviews' => route('reviews.index', $this->id)
            ]
        ];

24) To make a logic for total price we can write:

	return [
            'name' => $this->name,
            'description' => $this->detail,
            'price' => $this->price,
            'stock' => $this->stock == 0 ? 'Out of stock' : $this->stock,
            'discount' => $this->discount,
            'totalPrice' => round((1- ($this->discount/100)) * $this->price,2),
            'rating' => $this->reviews->count() > 0 ? round($this->reviews->sum('star')/$this->reviews->count(),2) : 'No rating yet',
            'href' => [
                'reviews' => route('reviews.index', $this->id)
            ]
        ];




#Product Collection Transforming


We want to show name, total price, rating, href only  in the index page and when user clicks the href it will show the full 
details of that product id.
So let's begin: 


25) Go to productCollection and instead of use Illuminate\Http\Resources\Json\ResourceCollection;
write use Illuminate\Http\Resources\Json\Resource;

and , instead of class ProductCollection extends ResourceCollection write 
class ProductCollection extends Resource

(because the Resource should match the ProductResource's Resource)

26) In productController index write:

    public function index()
    {
        return ProductCollection::collection(Product::all());
    }

and import this:
	use App\Http\Resources\Product\ProductCollection;


(Now, if you reload your localhost:8000/api/products you will not see the href of 
product resource as because we are returning from productcollection so do the following number 27)

27) In ProductCollection.php write:
        return [
            'name' => $this->name,
            'totalPrice' => round((1- ($this->discount/100)) * $this->price,2),
            'rating' => $this->reviews->count() > 0 ? round($this->reviews->sum('star')/$this->reviews->count(),2) : 'No rating yet',
            'discount' => $this->discount,
            'href' => route('products.show',$this->id)
        ];

NOW, In localhost:8000/api/products/ you will see that each data has some info
and a link. When you click on that link you will be able to see the full details of that particular
data.


Till now we have products to product details, to we will do product details to review details

